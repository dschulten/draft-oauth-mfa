



Network Working Group                                          J. Hanson
Internet-Draft                                                Auth0 Inc.
Expires: July 7, 2017                                    January 3, 2017


                 OAuth 2.0 Multi-Factor Authentication
                     draft-hanson-oauth-mfa-latest

Abstract

   This specification provides a framework for the use of strong
   authentication with OAuth 2.0.  Mechanisms are specified for
   initiating an authorization session.  New authorization grant types
   are defined that allow clients to obtain access tokens within the
   context of a strongly authenticated authorization session.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on July 7, 2017.

Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.




Hanson                    Expires July 7, 2017                  [Page 1]

Internet-Draft    OAuth 2.0 Multi-Factor Authentication     January 2017


1.  Introduction

   Strong authentication is a method of access control that grants
   access only after multiple factors of authentication have been
   presented.  The factors typically fall into the following categories:
   knowledge (something you know), possession (something you have), and
   inherence (something you are).

   OAuth 2.0 [RFC6749] is an authorization framework that enables a
   third-party application to obtain limited access to a protected HTTP
   resource.  In OAuth, those third-party applications are called
   clients; they access protected resources by presenting an access
   token to the HTTP resource.  Access tokens are issued to clients by
   an authorization server with the (sometimes implicit) approval of the
   resource owner.  These access tokens are typically obtained by
   exchanging an authorization grant, which represents the authorization
   granted by the resource owner (or by a privileged administrator).

   This specification defines a general framework for the use of strong
   authentication within OAuth 2.0.  It provides a generic mechanism for
   indicating when strong authentication is required.  It defines
   additional extension grant types that allow strong authentication
   credentials to be presented in order to obtain access tokens.

   This use of strong authentication allows authorization servers to
   implement correspondingly strong authorization policies, including
   step-up authentication and transaction confirmation.

   Authorization servers that implement support for resource owner
   password credentials can augment existing password infrastructure by
   requiring a strong second factor prior to issuing access tokens.

   Transaction confirmation can be used to increase the level of
   assurance prior to issuing tokens for highly privileged operations,
   such as a bank withdrawal.  For example, an end-user (resource owner)
   can grant an application (client) access to her account at a
   brokerage firm (resource server).  The application is authorized to
   obtain real-time stock quotes as well as place orders, and is issued
   both an access token and refresh token.  As a matter of policy, the
   access token can be used to obtain stock quotes and is valid for 24
   hours.  Every 24 hour period, the refresh token is used to obtain a
   new access token, so that access to stock quotes is uninterrupted.
   The access token can also be used to place an order, but is subject
   to more stringent security requirements.  Using this extension, the
   refresh token can be used to initiate an authorization transaction
   which, once confirmed by the user, allows issuance of an access token
   that demonstrates strong authentication and has a limited lifetime.




Hanson                    Expires July 7, 2017                  [Page 2]

Internet-Draft    OAuth 2.0 Multi-Factor Authentication     January 2017


1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   [RFC2119].

1.2.  Terminology

   This specification also defines the following terms:

   MFA Token:

      A short-lived token representing an authorization session.

2.  Protocol Flow

   +----------+
   | Resource |
   |  Owner   |
   |          |
   +----------+
      v    v
      |    |
     (A)  (D)
      |    |
      v    v
   +---------+                                      +---------------+
   |         |>-(B)--- Authorization Grant -------->|               |
   |         |                                      |               |
   |         |<-(C)-------- MFA Token -------------<|               |
   |         |                                      | Authorization |
   |         |>-(E)-- Strong Authn Credential ----->|     Server    |
   |         |             & MFA Token              |               |
   |         |                                      |               |
   | Client  |<-(F)------- Access Token -----------<|               |
   |         |                                      +---------------+
   |         |
   |         |                                      +---------------+
   |         |>-(G)------- Access Token ----------->|               |
   |         |                                      |    Resource   |
   |         |<-(H)---- Protected Resource --------<|     Server    |
   |         |                                      |               |
   +---------+                                      +---------------+

                     Figure 1: Abstract Protocol Flow





Hanson                    Expires July 7, 2017                  [Page 3]

Internet-Draft    OAuth 2.0 Multi-Factor Authentication     January 2017


   (A)  The client obtains authorization from the resource owner.  The
        authorization can be obtained directly from the resource owner
        (as shown), or preferably indirectly via the authorization
        server as an intermediary.  The resource owner's authorization
        is represented as an authorization grant.

   (B)  The client requests an access token by authenticating with the
        authorization server and presenting the authorization grant.

   (C)  The authorization server authenticates the client and validates
        the authorization grant, and if strong authentication is
        required, returns an error along with an MFA token.

   (D)  The resource owner provides the client with a strong
        authentication credential.

   (E)  The client requests an access token from the authorization
        server's token endpoint by including the strong authentication
        credential received from the resource owner along with the MFA
        token received during the prior access token request.  When
        making the request, the client authenticates with the
        authorization server.

   (F)  The authorization server authenticates the client and validates
        the resource owner strong authentication credential, and if
        valid, issues an access token.

   (G)  The client requests the protected resource from the resource
        server and authenticates by presenting the access token.

   (H)  The resource server validates the access token, and if valid,
        serves the request.

3.  Authorization Session

   A client initates an authorization session by sending a token request
   to the token endpoint as described in Section 3.2 of [RFC6749].

3.1.  Token Request

   The client may indicate that it supports strong authentication by
   including the following parameter in the token request to the token
   endpoint.

   mfa_supported

      OPTIONAL.  Indicates that the client support strong
      authentication.



Hanson                    Expires July 7, 2017                  [Page 4]

Internet-Draft    OAuth 2.0 Multi-Factor Authentication     January 2017


   The following is a non-normative example of a token request (with
   extra line breaks for display purposes only):

   POST /token HTTP/1.1
   Host: server.example.com
   Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
   Content-Type: application/x-www-form-urlencoded

   grant_type=password&username=johndoe&password=A3ddj3w&mfa_supported=1

3.2.  Token Error Response

   In addition to the error codes defined in Section 5.2 of [RFC6749],
   the following error codes are specific multi-factor authorization
   flows:

   mfa_required

      The authorization server requires strong authentication.

   In addition to the response parameters specified by OAuth 2.0, the
   following parameters MUST be included in the response when the error
   code is set to mfa_required:

   mfa_token

      REQUIRED.  The MFA token used to continue the authorization
      session.

   The following is a non-normative example token error response:

   HTTP/1.1 403 Forbidden
   Content-Type: application/json;charset=UTF-8
   Cache-Control: no-store
   Pragma: no-cache

   {
     "error":"mfa_required",
     "mfa_token": "eyJhbGciOiJIUzI1NiIsImtpZCI6IjFlOWdkazcifQ.eyJpc3Mi
       OiJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwic3ViIjoiMjQ4Mjg5NzYxMDA
       xIiwiYXVkIjpbImh0dHA6Ly9zZXJ2ZXIuZXhhbXBsZS5jb20vdG9rZW4iLCJodH
       RwOi8vc2VydmVyLmV4YW1wbGUuY29tL2F1dGhlbnRpY2F0b3JzIl0sIm1mYSI6W
       yJvdHAiLCJvb2IiXSwiZXhwIjoxMzExMjgxOTcwLCJpYXQiOjEzMTEyODA5NzB9
       .IvjKKc54lHvAOCskyEUU8Ou_-8-oXKyFS5bbq-utZPA"
   }






Hanson                    Expires July 7, 2017                  [Page 5]

Internet-Draft    OAuth 2.0 Multi-Factor Authentication     January 2017


4.  Obtaining Authorization using Strong Authentication

4.1.  OTP Credentials Grant

   An one-time password is generated by an OTP device, which includes
   hardware devices as well as software-based OTP generators on devices
   such as mobile phones.

4.1.1.  Access Token Request

   The client makes a request to the token endpoint by adding the
   following parameters using the "application/x-www-form-urlencoded"
   format per Appendix B with a character encoding of UTF-8 in the HTTP
   request entity-body:

   grant_type

      REQUIRED.  Value MUST be set to "http://auth0.com/oauth/grant-
      type/mfa-otp".

   otp

      REQUIRED.  The one-time password.

   mfa_token

      REQUIRED.  The MFA token received when initiating the
      authorization session.

4.1.2.  Access Token Response

   If the access token request is valid and authorized, the
   authorization server issues an access token and optional refresh
   token as described in in Section 5.1 of [RFC6749].  If the request
   failed client authentication or is invalid, the authorization server
   returns an error response as described in Section 5.2 of [RFC6749].

4.2.  Out-of-Band Verification Code Grant

   An out-of-band verification code is obtained by challenging an out-
   of-band authenticator.

4.2.1.  Access Token Request

   The client makes a request to the token endpoint by adding the
   following parameters using the "application/x-www-form-urlencoded"
   format per Appendix B with a character encoding of UTF-8 in the HTTP
   request entity-body:



Hanson                    Expires July 7, 2017                  [Page 6]

Internet-Draft    OAuth 2.0 Multi-Factor Authentication     January 2017


   grant_type

      REQUIRED.  Value MUST be set to "http://auth0.com/oauth/grant-
      type/mfa-oob".

   oob_code

      REQUIRED.  The out-of-band verification code.

   mfa_token

      REQUIRED.  The MFA token received when initiating the
      authorization session.

4.2.2.  Access Token Response

   If the access token request is valid and authorized, the
   authorization server issues an access token and optional refresh
   token as described in in Section 5.1 of [RFC6749].  If the request
   failed client authentication or is invalid, the authorization server
   returns an error response as described in Section 5.2 of [RFC6749].

5.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <http://www.rfc-editor.org/info/rfc6749>.

Author's Address

   Jared Hanson
   Auth0 Inc.

   Email: jaredhanson@gmail.com
   URI:   http://www.jaredhanson.net/











Hanson                    Expires July 7, 2017                  [Page 7]
